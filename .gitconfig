[alias]
	# Commit all changes
	c = commit -a
	up = pull
	p = push
	s = status
	sclone = clone --depth=1
	# Clone a repository including all submodules
	rclone = clone --recursive
	co = checkout

	# Show the diff between the latest commit and the current state
	df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# View abbreviated SHA, description, and history graph
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# depot_tools specific
	reup = rebase-update
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"


	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"


[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

[pager]
	# insanely beautiful diffs ==> npm install -g diff-so-fancy
	diff = diff-so-fancy | less --tabs=4 -RFX
	show = diff-so-fancy | less --tabs=4 -RFX

[interactive]
	diffFilter = "diff-so-fancy"

# so much color
[color]
	ui = always
[color "diff"]
	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

# git mergetool
[merge]
	tool = opendiff

# rewrites of repo paths
# [url "git@github.com:"]
#	insteadOf = "gh:"
#	insteadOf = "git://github.com"
#	pushInsteadOf = "github:"
#	pushInsteadOf = "git://github.com/"
#    pushInsteadOf = "https://github.com/"
#[url "git@gist.github.com:"]
#	insteadOf = "gst:"
#	pushInsteadOf = "gist:"
#	pushInsteadOf = "git://gist.github.com/"
#	pushInsteadOf = "https://gist.github.com/"

# correct typos
[help]
	autocorrect = 1

# push easily. http://stackoverflow.com/a/23918418/89484
[push]
	default = current

# use separate file for username / github token / etc
[include]
  path = ~/.gitconfig.local

[init]
	templatedir = ~/.git_template

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

[fetch]
	prune = true
[diff]
	compactionHeuristic = true

[user]
	name = ccorbi
	email = carles.corbi@gmail.com

# [difftool "sourcetree"]
# 	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
# 	path =
# [mergetool "sourcetree"]
# 	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
# 	trustExitCode = true
# [filter "media"]
# 	clean = git-media-clean %f
# 	smudge = git-media-smudge %f
